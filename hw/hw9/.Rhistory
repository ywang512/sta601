xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### sensitivity plot of c
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(10^i, p)
tau = rep(0.2, p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("C =", 10^i))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4, p)
tau = rep(10^(i-2), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4, p)
tau = rep(10^(i-1), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4, p)
tau = rep(10^(i-2), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### sensitivity plot of c
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(10^(i-2), p)
tau = rep(0.2, p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("C =", 10^i))
}
### sensitivity plot of c
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(10^(i-2), p)
tau = rep(0.2, p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("C =", 10^(i-2)))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4, p)
tau = rep(10^(i-2), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### sensitivity plot of c
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(10^i, p)
tau = rep(0.2, p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("C =", 10^i)))
### sensitivity plot of c
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(10^i, p)
tau = rep(0.2, p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("C =", 10^i))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4, p)
tau = rep(10^(i-2), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4, p)
tau = rep(10^(i), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
10^(-2)
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4, p)
tau = rep(10^(i-2), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
c = rep(4, p)
tau = rep(1, p)
### intemediate
D = diag(c * tau)
Dm2 = diag(1 / (c^2*tau^2))
### initiation
S = 1000
beta.gibbs = array(dim = c(S, p))
sigma2.gibbs = array(dim = c(S, 1))
z.gibbs = array(dim = c(S, p))
BETA = betaOLS
SIGMA2 = as.numeric(sigma2OLS)
Z = rep(1, p)
### gibbs sampling
for (s in 1:S) {
AZ = Z * (c-1) + 1
Dz = diag(AZ^2)
Dm2 = diag(1/AZ^2)
### sample BETA
Vb = solve(XTX / SIGMA2 + Dm2)
Eb = Vb %*% XTX %*% betaOLS / SIGMA2
BETA = MASS::mvrnorm(1, mu = Eb, Sigma = Vb)
### sample SIGMA2
nun = n + nu0
s2n = nu0*s20 + sum((y - X %*% BETA)^2)
SIGMA2 = 1/rgamma(1, nun, s2n)
### sample Z
for (i in 1:p) {
a = dnorm(BETA[i], 0, c[i]*tau[i])
b = dnorm(BETA[i], 0, tau[i])
pz1 = a / (a+b)
Z[i] = rbinom(1, 1, pz1)
}
### store samples
beta.gibbs[s, ] = BETA
sigma2.gibbs[s, 1] = SIGMA2
z.gibbs[s, ] = Z
}
c = rep(4, p)
tau = rep(0.1, p)
### intemediate
D = diag(c * tau)
Dm2 = diag(1 / (c^2*tau^2))
### initiation
S = 1000
beta.gibbs = array(dim = c(S, p))
sigma2.gibbs = array(dim = c(S, 1))
z.gibbs = array(dim = c(S, p))
BETA = betaOLS
SIGMA2 = as.numeric(sigma2OLS)
Z = rep(1, p)
### gibbs sampling
for (s in 1:S) {
AZ = Z * (c-1) + 1
Dz = diag(AZ^2)
Dm2 = diag(1/AZ^2)
### sample BETA
Vb = solve(XTX / SIGMA2 + Dm2)
Eb = Vb %*% XTX %*% betaOLS / SIGMA2
BETA = MASS::mvrnorm(1, mu = Eb, Sigma = Vb)
### sample SIGMA2
nun = n + nu0
s2n = nu0*s20 + sum((y - X %*% BETA)^2)
SIGMA2 = 1/rgamma(1, nun, s2n)
### sample Z
for (i in 1:p) {
a = dnorm(BETA[i], 0, c[i]*tau[i])
b = dnorm(BETA[i], 0, tau[i])
pz1 = a / (a+b)
Z[i] = rbinom(1, 1, pz1)
}
### store samples
beta.gibbs[s, ] = BETA
sigma2.gibbs[s, 1] = SIGMA2
z.gibbs[s, ] = Z
}
Dm2
### data and priors
n = nrow(X)
p = ncol(X)
nu0 = 2
s20 = 1
g = n
c = rep(10, p)
tau = rep(1, p)
betaOLS = solve(t(X) %*% X) %*% t(X) %*% y
sigma2OLS = t(y - X %*% betaOLS) %*% (y - X %*% betaOLS) / (n - p)
XTX = t(X) %*% X
gibbs_sampler = function(c, tau) {
### intemediate
D = diag(c * tau)
Dm2 = diag(1 / (c^2*tau^2))
### initiation
S = 1000
beta.gibbs = array(dim = c(S, p))
sigma2.gibbs = array(dim = c(S, 1))
z.gibbs = array(dim = c(S, p))
BETA = betaOLS
SIGMA2 = as.numeric(sigma2OLS)
Z = rep(1, p)
### gibbs sampling
for (s in 1:S) {
AZ = Z * (c-1) + 1
Dz = diag(AZ*tau)
Dm2 = diag(1/(AZ*tau))
### sample BETA
Vb = solve(XTX / SIGMA2 + Dm2)
Eb = Vb %*% XTX %*% betaOLS / SIGMA2
BETA = MASS::mvrnorm(1, mu = Eb, Sigma = Vb)
### sample SIGMA2
nun = n + nu0
s2n = nu0*s20 + sum((y - X %*% BETA)^2)
SIGMA2 = 1/rgamma(1, nun, s2n)
### sample Z
for (i in 1:p) {
a = dnorm(BETA[i], 0, c[i]*tau[i])
b = dnorm(BETA[i], 0, tau[i])
pz1 = a / (a+b)
Z[i] = rbinom(1, 1, pz1)
}
### store samples
beta.gibbs[s, ] = BETA
sigma2.gibbs[s, 1] = SIGMA2
z.gibbs[s, ] = Z
}
return(list(beta = beta.gibbs, sigma2 = sigma2.gibbs, z = z.gibbs))
}
### sensitivity plot of c
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(10^i, p)
tau = rep(0.2, p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("C =", 10^i))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4, p)
tau = rep(10^(i-2), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4, p)
tau = rep(10^(i-3), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(10, p)
tau = rep(10^(i-3), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(5, p)
tau = rep(10^(i-3), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
### data and priors
n = nrow(X)
p = ncol(X)
nu0 = 2
s20 = 1
g = n
c = rep(10, p)
tau = rep(1, p)
betaOLS = solve(t(X) %*% X) %*% t(X) %*% y
sigma2OLS = t(y - X %*% betaOLS) %*% (y - X %*% betaOLS) / (n - p)
XTX = t(X) %*% X
gibbs_sampler = function(c, tau) {
### intemediate
D = diag(c * tau)
Dm2 = diag(1 / (c^2*tau^2))
### initiation
S = 1000
beta.gibbs = array(dim = c(S, p))
sigma2.gibbs = array(dim = c(S, 1))
z.gibbs = array(dim = c(S, p))
BETA = betaOLS
SIGMA2 = as.numeric(sigma2OLS)
Z = rep(1, p)
### gibbs sampling
for (s in 1:S) {
AZ = Z * (c-1) + 1
Dm2 = diag(1/(AZ*tau)^2)
### sample BETA
Vb = solve(XTX / SIGMA2 + Dm2)
Eb = Vb %*% XTX %*% betaOLS / SIGMA2
BETA = MASS::mvrnorm(1, mu = Eb, Sigma = Vb)
### sample SIGMA2
nun = n + nu0
s2n = nu0*s20 + sum((y - X %*% BETA)^2)
SIGMA2 = 1/rgamma(1, nun, s2n)
### sample Z
for (i in 1:p) {
a = dnorm(BETA[i], 0, c[i]*tau[i])
b = dnorm(BETA[i], 0, tau[i])
pz1 = a / (a+b)
Z[i] = rbinom(1, 1, pz1)
}
### store samples
beta.gibbs[s, ] = BETA
sigma2.gibbs[s, 1] = SIGMA2
z.gibbs[s, ] = Z
}
return(list(beta = beta.gibbs, sigma2 = sigma2.gibbs, z = z.gibbs))
}
### sensitivity plot of c
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(10^i, p)
tau = rep(0.2, p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("C =", 10^i))
}
### sensitivity plot of c
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(2^i, p)
tau = rep(0.2, p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("C =", 10^i))
}
### sensitivity plot of c
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(4^i, p)
tau = rep(0.2, p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("C =", 4^i))
}
### sensitivity plot of tau
par(mfrow=c(2, 3))
for (i in 1:6) {
c = rep(5, p)
tau = rep(10^(i-3), p)
set.seed(10)
params = gibbs_sampler(c, tau)
barplot(colMeans(params$z),
xlab = "beta_j",
ylab = "P(z!=0|y)",
ylim = c(0, 1),
names.arg=colnames(X),
las=2,
main=paste("tau =", 10^(i-3)))
}
c = rep(4, p)
tau = rep(1, p)
params = gibbs_sampler(c = c, tau = tau)
z.gibbs = params$z
beta.gibbs = params$beta
sigma2.gibbs = params$sigma2
### Pr(z_i == 0 | Y)
colnames(z.gibbs) = colnames(X)
apply(z.gibbs, 2, mean)
### posterior confidence interval
colnames(beta.gibbs) = colnames(X)
apply(beta.gibbs, 2, quantile, c(0.025, 0.975))
colnames(sigma2.gibbs) = "sigma^2"
apply(sigma2.gibbs, 2, quantile, c(0.025, 0.975))
